{
  function isSubject(t) {
    return true;
  }

  function isVerb(t) {
    return true;
  }

  function isObject(t) {
    return true;
  }

  function isRelationFilter(obj) {
    return obj.type == 'relation';
  }

  function isAttributeFilter(obj) {
    return obj.type == 'attribute';
  }

  function createLeafAttributeFilter(select, attribute, operation, arg, query_continuations) {
    var node = { 
      select: select, 
      filters: 
        [ 
          { type: 'attribute', attribute: attribute, operation: operation, argument: arg } 
        ].concat(query_continuations.filter(isAttributeFilter)), 
      moveup: query_continuations.filter(isRelationFilter) 
    };
    if (!node.moveup || node.moveup.length == 0) {
      delete node["moveup"];
    }
    return node;
  }

  function createNodeFilter(select, relation, query_continuation) {
    return {
      select: select, 
      filters: 
        [ 
          { type: 'relation', relation: relation, target: { select: query_continuation.select, filters: query_continuation.filters } } 
        ].concat(query_continuation.moveup != undefined ? query_continuation.moveup : [] ) 
    };
  }

  function processRootNode(query) {
    // if root has filters to move up, append to current filters (apply to same level)
    if (query.moveup && query.moveup.length != 0) {
      query.filters = query.filters.concat(query.moveup);
      delete query["moveup"];
    }
    return query
  }

}

start
  = command+

command
  = 'find'i sp query:query '\n'* { return processRootNode(query); }

query
  = s:subject sa_conn? !prep a:attribute op:oper sp arg:argument qc:query_cont* { return createLeafAttributeFilter(s, a, op, arg, qc); }
  / o:object ov_conn? !prep v:verb vs_conn? q:query { return createNodeFilter(o, v, q); }
  / s:subject sv_conn? !prep v:verb q:query { return createNodeFilter(s, v, q); }
  / s:subject { return { select:s } }

query_cont
  = 'and'i sp a:attribute op:oper sp arg:argument { return { type: 'attribute', attribute: a, operation: op, argument: arg } }
  / 'and'i sp ov_conn? !prep v:verb vs_conn? q:query { return { type: 'relation', relation: v, target: q } }

token
  = t:[0-9a-zA-Z]+ sp { return t.join(""); }

subject
  = t:token & { return isSubject(t); } { return t; }

verb
  = t:token & { return isVerb(t); } { return t; }

object
  = t:token & { return isObject(t); } { return t; }

attribute "table attribute"
  = t:token 

argument "comparison argument"
  = t:token

sa_conn
  = 'with'i sp

sv_conn
  = 'who'i sp
  / 'that'i sp

ov_conn
  = 'that'i sp

vs_conn
  = 'by'i sp

oper "comparison operator"
  = 'greater or equal than'i { return '>='; }
  / 'lesser or equal than'i { return '<='; }
  / 'greater than'i { return '>'; }
  / 'lesser than'i { return '<'; }
  / 'equals'i { return '='; }
  / 'not equals'i { return '!='; }
  / 'different than'i { return '!='; }
  / 'is' { return '='; }
  / '<=' { return '<='; }
  / '>=' { return '>='; }
  / '==' { return '='; }
  / '!=' { return '!='; }
  / '<' { return '<'; }
  / '>' { return '>'; }
  / '=' { return '='; }

prep
  = 'with'i
  / 'that'i
  / 'who'i
  / 'by'i

rsvd
  = prep
  / oper

sp
  = [ ]* { return [] }
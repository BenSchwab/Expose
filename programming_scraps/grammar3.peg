{
  function isNoun(t) {
    return true;
  }
  
  function isVerb(t) {
    return true;
  }
  
  function isAttribute(t) {
    return true;
  }


/*
  nouns = ['beer', 'beers', 'drinker', 'drinkers', 'bar', 'bars'];
  verbs = ['like', 'liked', 'served'];
  attribute = ['name', 'price'];

  function isNoun(t) {
    return nouns.indexOf(t) >= 0;
  }

  function isVerb(t) {
    return verbs.indexOf(t) >= 0;
  }

  function isAttribute(t) {
    return attribute.indexOf(t) >= 0;
  }
*/
/*
  function isNoun(t) {
    var nouns = StateKeeper.getNounTables().map(function (e) { return e.name; });
    return nouns.indexOf(t) >= 0;
  }

  function isVerb(t) {
    var verbs = StateKeeper.getVerbTables().map(function (e) { return e.name; });
    return verbs.indexOf(t) >= 0;
  }
*/

  function isRelationFilter(obj) {
    return obj.type == 'relation';
  }

  function isAttributeFilter(obj) {
    return obj.type == 'attribute';
  }

  function createLeafAttributeFilter(select, attribute, operation, arg, query_continuations) {
    var node = { 
      select: select, 
      filters: 
        [ 
          { type: 'attribute', attribute: attribute, operation: operation, argument: arg } 
        ].concat(query_continuations.filter(isAttributeFilter)), 
      moveup: query_continuations.filter(isRelationFilter) 
    };
    if (!node.moveup || node.moveup.length == 0) {
      delete node["moveup"];
    }
    return node;
  }

  function createNodeFilter(select, relation, negate, query_continuation) {
    return {
      select: select, 
      filters: 
        [ 
          { type: 'relation', relation: relation, negate: negate, target: { select: query_continuation.select, filters: query_continuation.filters } } 
        ].concat(query_continuation.moveup != undefined ? query_continuation.moveup : [] ) 
    };
  }

  function processRootNode(query) {
    // if root has filters to move up, append to current filters (apply to same level)
    if (query.moveup && query.moveup.length != 0) {
      query.filters = query.filters.concat(query.moveup);
      delete query["moveup"];
    }
    return query
  }

}

start
  = command+

command
  = 'find'i sp query:query '\n'* { return processRootNode(query); }

query
  = n:noun na_conn? !rsvd a:attribute op:oper sp arg:argument qc:query_cont* { return createLeafAttributeFilter(n, a, op, arg, qc); }
  / n:noun nv_conn? neg:negateSp? !rsvd v:verb vn_conn? q:query { return createNodeFilter(n, v, neg!="", q); }

query_cont 
  = 'and'i sp a:attribute op:oper sp arg:argument { return { type: 'attribute', attribute: a, operation: op, argument: arg } }
  / 'and'i sp nv_conn? neg:negateSp? !rsvd v:verb vn_conn? q:query { return { type: 'relation', relation: v, negate: neg!="", target: q } }

token
  = t:[0-9a-zA-Z]+ { return t.join(""); }

tokenSpOpt
  = t:token [ ]* { return t; }

tokenSpReq
  = t:token sp { return t; }

noun "@noun"
  = t:tokenSpReq { return t; }
  / t:tokenSpOpt & { return isNoun(t); } { return t; }
 
verb "@verb"
  = t:tokenSpReq { return t; }
  / t:tokenSpOpt & { return isVerb(t); } { return t; }

attribute "@table_attribute"
  = t:tokenSpReq { return t; }
  / t:tokenSpOpt & { return isAttribute(t); } { return t; }

argument "@comparison_argument"
  = t:tokenSpOpt { return t; }

na_conn
  = 'with'i sp

nv_conn
  = 'who'i sp
  / 'that'i sp

vn_conn
  = 'by'i sp

oper "@comparison_operator"
  = 'greater'i sp 'or'i sp 'equal'i sp 'than'i { return '>='; }
  / 'lesser'i sp 'or'i sp 'equal'i sp 'than'i { return '<='; }
  / 'greater'i sp 'than'i { return '>'; }
  / 'lesser'i sp 'than'i { return '<'; }
  / 'equals'i { return '='; }
  / 'not'i sp 'equals'i { return '!='; }
  / 'different'i sp 'than'i { return '!='; }
  / 'is'i { return '='; }
  / '<=' { return '<='; }
  / '>=' { return '>='; }
  / '==' { return '='; }
  / '!=' { return '!='; }
  / '<' { return '<'; }
  / '>' { return '>'; }
  / '=' { return '='; }

prep
  = 'with'i
  / 'that'i
  / 'who'i
  / 'by'i

negate
  = 'not'i { return true; }

negateSp
  = neg:negate sp { return neg; }

rsvd
  = prep
  / oper
  / negate

sp
  = [ ]+ { return []; }
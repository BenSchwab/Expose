parser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "command": parse_command,
        "query": parse_query,
        "query_cont": parse_query_cont,
        "token": parse_token,
        "subject": parse_subject,
        "verb": parse_verb,
        "object": parse_object,
        "attribute": parse_attribute,
        "argument": parse_argument,
        "sa_conn": parse_sa_conn,
        "sv_conn": parse_sv_conn,
        "ov_conn": parse_ov_conn,
        "vs_conn": parse_vs_conn,
        "oper": parse_oper,
        "prep": parse_prep,
        "rsvd": parse_rsvd,
        "sp": parse_sp
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1;
        
        result1 = parse_command();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_command();
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_command() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 4).toLowerCase() === "find") {
          result0 = input.substr(pos, 4);
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"find\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_sp();
          if (result1 !== null) {
            result2 = parse_query();
            if (result2 !== null) {
              result3 = [];
              if (input.charCodeAt(pos) === 10) {
                result4 = "\n";
                pos++;
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\n\"");
                }
              }
              while (result4 !== null) {
                result3.push(result4);
                if (input.charCodeAt(pos) === 10) {
                  result4 = "\n";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\n\"");
                  }
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, query) { return query; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_query() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_subject();
        if (result0 !== null) {
          result1 = parse_sa_conn();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_prep();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result3 = parse_attribute();
              if (result3 !== null) {
                result4 = parse_oper();
                if (result4 !== null) {
                  result5 = parse_sp();
                  if (result5 !== null) {
                    result6 = parse_argument();
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_query_cont();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_query_cont();
                      }
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, s, a, op, arg, qc) { return createLeafAttributeFilter(s, a, op, arg, qc); })(pos0, result0[0], result0[3], result0[4], result0[6], result0[7]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_object();
          if (result0 !== null) {
            result1 = parse_ov_conn();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              pos2 = pos;
              reportFailures++;
              result2 = parse_prep();
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos2;
              }
              if (result2 !== null) {
                result3 = parse_verb();
                if (result3 !== null) {
                  result4 = parse_vs_conn();
                  result4 = result4 !== null ? result4 : "";
                  if (result4 !== null) {
                    result5 = parse_query();
                    if (result5 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, o, v, q) { return createNodeFilter(o, v, q); })(pos0, result0[0], result0[3], result0[5]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_subject();
            if (result0 !== null) {
              result1 = parse_sv_conn();
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                pos2 = pos;
                reportFailures++;
                result2 = parse_prep();
                reportFailures--;
                if (result2 === null) {
                  result2 = "";
                } else {
                  result2 = null;
                  pos = pos2;
                }
                if (result2 !== null) {
                  result3 = parse_verb();
                  if (result3 !== null) {
                    result4 = parse_query();
                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, s, v, q) { return createNodeFilter(s, v, q); })(pos0, result0[0], result0[3], result0[4]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              result0 = parse_subject();
              if (result0 !== null) {
                result0 = (function(offset, s) { return { select:s } })(pos0, result0);
              }
              if (result0 === null) {
                pos = pos0;
              }
            }
          }
        }
        return result0;
      }
      
      function parse_query_cont() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3).toLowerCase() === "and") {
          result0 = input.substr(pos, 3);
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"and\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_sp();
          if (result1 !== null) {
            result2 = parse_attribute();
            if (result2 !== null) {
              result3 = parse_oper();
              if (result3 !== null) {
                result4 = parse_sp();
                if (result4 !== null) {
                  result5 = parse_argument();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, a, op, arg) { return { type: 'attribute', attribute: a, operation: op, argument: arg } })(pos0, result0[2], result0[3], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.substr(pos, 3).toLowerCase() === "and") {
            result0 = input.substr(pos, 3);
            pos += 3;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"and\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_sp();
            if (result1 !== null) {
              result2 = parse_ov_conn();
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                pos2 = pos;
                reportFailures++;
                result3 = parse_prep();
                reportFailures--;
                if (result3 === null) {
                  result3 = "";
                } else {
                  result3 = null;
                  pos = pos2;
                }
                if (result3 !== null) {
                  result4 = parse_verb();
                  if (result4 !== null) {
                    result5 = parse_vs_conn();
                    result5 = result5 !== null ? result5 : "";
                    if (result5 !== null) {
                      result6 = parse_query();
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v, q) { return { type: 'relation', relation: v, target: q } })(pos0, result0[4], result0[6]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_token() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[0-9a-zA-Z]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9a-zA-Z]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9a-zA-Z]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9a-zA-Z]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_sp();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t) { return t.join(""); })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_subject() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_token();
        if (result0 !== null) {
          result1 = (function(offset, t) { return isSubject(t); })(pos, result0) ? "" : null;
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t) { return t; })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_verb() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_token();
        if (result0 !== null) {
          result1 = (function(offset, t) { return isVerb(t); })(pos, result0) ? "" : null;
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t) { return t; })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_object() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_token();
        if (result0 !== null) {
          result1 = (function(offset, t) { return isObject(t); })(pos, result0) ? "" : null;
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t) { return t; })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attribute() {
        var result0;
        
        reportFailures++;
        result0 = parse_token();
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("table attribute");
        }
        return result0;
      }
      
      function parse_argument() {
        var result0;
        
        reportFailures++;
        result0 = parse_token();
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("comparison argument");
        }
        return result0;
      }
      
      function parse_sa_conn() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 4).toLowerCase() === "with") {
          result0 = input.substr(pos, 4);
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"with\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_sp();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_sv_conn() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 3).toLowerCase() === "who") {
          result0 = input.substr(pos, 3);
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"who\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_sp();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.substr(pos, 4).toLowerCase() === "that") {
            result0 = input.substr(pos, 4);
            pos += 4;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"that\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_sp();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_ov_conn() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 4).toLowerCase() === "that") {
          result0 = input.substr(pos, 4);
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"that\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_sp();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_vs_conn() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 2).toLowerCase() === "by") {
          result0 = input.substr(pos, 2);
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"by\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_sp();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_oper() {
        var result0;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        if (input.substr(pos, 21).toLowerCase() === "greater or equal than") {
          result0 = input.substr(pos, 21);
          pos += 21;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"greater or equal than\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return '>='; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.substr(pos, 20).toLowerCase() === "lesser or equal than") {
            result0 = input.substr(pos, 20);
            pos += 20;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"lesser or equal than\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset) { return '<='; })(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            if (input.substr(pos, 12).toLowerCase() === "greater than") {
              result0 = input.substr(pos, 12);
              pos += 12;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"greater than\"");
              }
            }
            if (result0 !== null) {
              result0 = (function(offset) { return '>'; })(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              if (input.substr(pos, 11).toLowerCase() === "lesser than") {
                result0 = input.substr(pos, 11);
                pos += 11;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"lesser than\"");
                }
              }
              if (result0 !== null) {
                result0 = (function(offset) { return '<'; })(pos0);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                if (input.substr(pos, 6).toLowerCase() === "equals") {
                  result0 = input.substr(pos, 6);
                  pos += 6;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"equals\"");
                  }
                }
                if (result0 !== null) {
                  result0 = (function(offset) { return '='; })(pos0);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  if (input.substr(pos, 10).toLowerCase() === "not equals") {
                    result0 = input.substr(pos, 10);
                    pos += 10;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"not equals\"");
                    }
                  }
                  if (result0 !== null) {
                    result0 = (function(offset) { return '!='; })(pos0);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                  if (result0 === null) {
                    pos0 = pos;
                    if (input.substr(pos, 14).toLowerCase() === "different than") {
                      result0 = input.substr(pos, 14);
                      pos += 14;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"different than\"");
                      }
                    }
                    if (result0 !== null) {
                      result0 = (function(offset) { return '!='; })(pos0);
                    }
                    if (result0 === null) {
                      pos = pos0;
                    }
                    if (result0 === null) {
                      pos0 = pos;
                      if (input.substr(pos, 2) === "is") {
                        result0 = "is";
                        pos += 2;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"is\"");
                        }
                      }
                      if (result0 !== null) {
                        result0 = (function(offset) { return '='; })(pos0);
                      }
                      if (result0 === null) {
                        pos = pos0;
                      }
                      if (result0 === null) {
                        pos0 = pos;
                        if (input.substr(pos, 2) === "<=") {
                          result0 = "<=";
                          pos += 2;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"<=\"");
                          }
                        }
                        if (result0 !== null) {
                          result0 = (function(offset) { return '<='; })(pos0);
                        }
                        if (result0 === null) {
                          pos = pos0;
                        }
                        if (result0 === null) {
                          pos0 = pos;
                          if (input.substr(pos, 2) === ">=") {
                            result0 = ">=";
                            pos += 2;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\">=\"");
                            }
                          }
                          if (result0 !== null) {
                            result0 = (function(offset) { return '>='; })(pos0);
                          }
                          if (result0 === null) {
                            pos = pos0;
                          }
                          if (result0 === null) {
                            pos0 = pos;
                            if (input.substr(pos, 2) === "==") {
                              result0 = "==";
                              pos += 2;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"==\"");
                              }
                            }
                            if (result0 !== null) {
                              result0 = (function(offset) { return '='; })(pos0);
                            }
                            if (result0 === null) {
                              pos = pos0;
                            }
                            if (result0 === null) {
                              pos0 = pos;
                              if (input.substr(pos, 2) === "!=") {
                                result0 = "!=";
                                pos += 2;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"!=\"");
                                }
                              }
                              if (result0 !== null) {
                                result0 = (function(offset) { return '!='; })(pos0);
                              }
                              if (result0 === null) {
                                pos = pos0;
                              }
                              if (result0 === null) {
                                pos0 = pos;
                                if (input.charCodeAt(pos) === 60) {
                                  result0 = "<";
                                  pos++;
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"<\"");
                                  }
                                }
                                if (result0 !== null) {
                                  result0 = (function(offset) { return '<'; })(pos0);
                                }
                                if (result0 === null) {
                                  pos = pos0;
                                }
                                if (result0 === null) {
                                  pos0 = pos;
                                  if (input.charCodeAt(pos) === 62) {
                                    result0 = ">";
                                    pos++;
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\">\"");
                                    }
                                  }
                                  if (result0 !== null) {
                                    result0 = (function(offset) { return '>'; })(pos0);
                                  }
                                  if (result0 === null) {
                                    pos = pos0;
                                  }
                                  if (result0 === null) {
                                    pos0 = pos;
                                    if (input.charCodeAt(pos) === 61) {
                                      result0 = "=";
                                      pos++;
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"=\"");
                                      }
                                    }
                                    if (result0 !== null) {
                                      result0 = (function(offset) { return '='; })(pos0);
                                    }
                                    if (result0 === null) {
                                      pos = pos0;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("comparison operator");
        }
        return result0;
      }
      
      function parse_prep() {
        var result0;
        
        if (input.substr(pos, 4).toLowerCase() === "with") {
          result0 = input.substr(pos, 4);
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"with\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 4).toLowerCase() === "that") {
            result0 = input.substr(pos, 4);
            pos += 4;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"that\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 3).toLowerCase() === "who") {
              result0 = input.substr(pos, 3);
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"who\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 2).toLowerCase() === "by") {
                result0 = input.substr(pos, 2);
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"by\"");
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_rsvd() {
        var result0;
        
        result0 = parse_prep();
        if (result0 === null) {
          result0 = parse_oper();
        }
        return result0;
      }
      
      function parse_sp() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        if (/^[ ]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ ]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[ ]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[ ]");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return [] })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
        function isSubject(t) {
          return true;
        }
      
        function isVerb(t) {
          return true;
        }
      
        function isObject(t) {
          return true;
        }
      
        function isRelationFilter(obj) {
          return obj.type == 'relation';
        }
      
        function isAttributeFilter(obj) {
          return obj.type == 'attribute';
        }
      
        function createLeafAttributeFilter(select, attribute, operation, arg, query_continuations) {
          var node = { 
            select: select, 
            filters: 
              [ 
                { type: 'attribute', attribute: attribute, operation: operation, argument: arg } 
              ].concat(query_continuations.filter(isAttributeFilter)), 
            moveup: query_continuations.filter(isRelationFilter) 
          };
          if (!node.moveup || node.moveup.length == 0) {
            delete node["moveup"];
          }
          return node;
        }
      
        function createNodeFilter(select, relation, query_continuation) {
          return {
            select: select, 
            filters: 
              [ 
                { type: 'relation', relation: relation, target: { select: query_continuation.select, filters: query_continuation.filters } } 
              ].concat(query_continuation.moveup != undefined ? query_continuation.moveup : [] ) 
          };
        }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
